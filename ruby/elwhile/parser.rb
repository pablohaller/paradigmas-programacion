#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'


require 'strscan'
require_relative 'expressions'
require_relative 'statements'

class Lexer
  NUMBER = /\d+(\.\d+)?/
  BOOL = /true|false/
  KEYWORDS = /if|else|while|print|do|until/
  ID = /[a-zA-Z_]\w*/
  OPERS = /[-+*\/(){};,]|[!=<>]=?|&&|\|\|/
  IGNORE = /(\/\/.*(\n|$)|\s)+/

  def initialize(input)
    @ss = StringScanner.new(input)
  end

  def next_token
    @ss.scan(IGNORE)
    return if @ss.eos?
    case
    when text = @ss.scan(NUMBER) then [:NUM, text.to_f]
    when text = @ss.scan(BOOL) then [:BOOL, text == "true"]
    when text = @ss.scan(KEYWORDS) then [text, text]
    when text = @ss.scan(ID) then [:ID, text]
    when text = @ss.scan(OPERS) then [text, text]
    else
      throw "Unexpected character #{@ss.getch}!"
    end
  end
end

class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 127)

def next_token
  @lexer.next_token
end

def tokenize_string(input)
  @lexer = Lexer.new(input)
  tokens = []
  while token = @lexer.next_token
    tokens << token
  end
  tokens
end

def parse_string(input)
  @lexer = Lexer.new(input)
  do_parse
end


...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    27,    26,    20,    21,    22,    23,    24,    25,    18,    19,
    16,    17,    67,    28,    15,    34,    35,    37,    29,    42,
    68,    65,    27,    26,    20,    21,    22,    23,    24,    25,
    18,    19,    16,    17,    27,    26,    20,    21,    22,    23,
    24,    25,    28,    69,    27,    26,    20,    21,    22,    23,
    24,    25,    18,    19,    16,    17,    27,    26,    20,    21,
    22,    23,    24,    25,    63,    70,    27,    26,    20,    21,
    22,    23,    24,    25,    18,    19,    16,    17,    27,    26,
   -35,   -35,   -35,   -35,   -35,   -35,    29,    72,    27,    26,
    20,    21,    22,    23,    24,    25,    18,    19,    16,    17,
    27,    71,    12,    77,    13,     4,    78,   nil,     5,    79,
     6,    14,   nil,   nil,     7,     8,   nil,     9,    10,    11,
    12,   nil,    13,    38,    12,   nil,    13,    38,   nil,    14,
   nil,   nil,   nil,    14,   nil,   nil,    10,    11,   nil,   nil,
    10,    11,    12,   nil,    13,    38,    12,   nil,    13,    38,
   nil,    14,   nil,   nil,   nil,    14,   nil,   nil,    10,    11,
   nil,   nil,    10,    11,    12,   nil,    13,    38,    12,   nil,
    13,    38,   nil,    14,   nil,   nil,   nil,    14,   nil,   nil,
    10,    11,   nil,   nil,    10,    11,    12,   nil,    13,    38,
    12,   nil,    13,    38,   nil,    14,   nil,   nil,   nil,    14,
   nil,   nil,    10,    11,   nil,   nil,    10,    11,    12,   nil,
    13,    38,    12,   nil,    13,    38,   nil,    14,   nil,   nil,
   nil,    14,   nil,   nil,    10,    11,   nil,   nil,    10,    11,
    12,   nil,    13,    38,    12,   nil,    13,    38,   nil,    14,
   nil,   nil,   nil,    14,   nil,   nil,    10,    11,   nil,   nil,
    10,    11,    12,   nil,    13,    38,    12,   nil,    13,    38,
   nil,    14,   nil,   nil,   nil,    14,   nil,   nil,    10,    11,
   nil,   nil,    10,    11,    12,   nil,    13,    38,    12,   nil,
    13,    38,   nil,    14,   nil,   nil,   nil,    14,   nil,   nil,
    10,    11,   nil,   nil,    10,    11,    12,   nil,    13,    38,
    12,   nil,    13,    38,   nil,    14,    57,   nil,   nil,    14,
   nil,   nil,    10,    11,   nil,   nil,    10,    11,    12,   nil,
    13,    38,    12,   nil,    13,    38,   nil,    14,   nil,   nil,
   nil,    14,   nil,   nil,    10,    11,   nil,   nil,    10,    11,
    12,   nil,    13,    38,    12,   nil,    13,    38,   nil,    14,
   nil,   nil,   nil,    14,   nil,   nil,    10,    11,   nil,   nil,
    10,    11,    27,    26,    20,    21,    22,    23,    24,    25,
    18,    19,    16,    17,   nil,   nil,    30,   nil,    66,     5,
    32,     6,   nil,   nil,    30,     7,     8,     5,     9,     6,
   nil,   nil,   nil,     7,     8,    30,     9,   nil,     5,    59,
     6,   nil,   nil,    30,     7,     8,     5,     9,     6,   nil,
   nil,    30,     7,     8,     5,     9,     6,   nil,   nil,    30,
     7,     8,     5,     9,     6,   nil,   nil,   nil,     7,     8,
   nil,     9,    27,    26,    20,    21,    22,    23,    24,    25,
    18,    19,    16,    17,    27,    26,    20,    21,    22,    23,
    24,    25,    18,    19,    16,    17,    27,    26,    20,    21,
    22,    23,    24,    25,    18,    19,    16,    17,    27,    26,
    20,    21,    22,    23,    24,    25,    18,    19,    16,    17,
    27,    26,    20,    21,    22,    23,    24,    25,    18,    19,
    16,    17,    27,    26,    20,    21,    22,    23,    24,    25,
    18,    19,    27,    26,    20,    21,    22,    23,    24,    25,
    18,    19,    27,    26,   -35,   -35,   -35,   -35,   -35,   -35,
    27,    26,   -35,   -35,   -35,   -35,   -35,   -35,    27,    26,
   -35,   -35,   -35,   -35,   -35,   -35,    27,    26,   -35,   -35,
   -35,   -35,   -35,   -35,    27,    26,   -35,   -35,   -35,   -35,
   -35,   -35 ]

racc_action_check = [
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    58,     4,     1,     6,     7,     9,     4,    15,
    58,    41,    61,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    61,    61,    45,    45,    45,    45,    45,    45,
    45,    45,    30,    61,    62,    62,    62,    62,    62,    62,
    62,    62,    62,    62,    62,    62,    46,    46,    46,    46,
    46,    46,    46,    46,    36,    62,    64,    64,    64,    64,
    64,    64,    64,    64,    64,    64,    64,    64,    47,    47,
    47,    47,    47,    47,    47,    47,    38,    64,    76,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
    53,    63,     0,    72,     0,     0,    74,   nil,     0,    76,
     0,     0,   nil,   nil,     0,     0,   nil,     0,     0,     0,
    12,   nil,    12,    12,    13,   nil,    13,    13,   nil,    12,
   nil,   nil,   nil,    13,   nil,   nil,    12,    12,   nil,   nil,
    13,    13,    14,   nil,    14,    14,    16,   nil,    16,    16,
   nil,    14,   nil,   nil,   nil,    16,   nil,   nil,    14,    14,
   nil,   nil,    16,    16,    17,   nil,    17,    17,    18,   nil,
    18,    18,   nil,    17,   nil,   nil,   nil,    18,   nil,   nil,
    17,    17,   nil,   nil,    18,    18,    19,   nil,    19,    19,
    20,   nil,    20,    20,   nil,    19,   nil,   nil,   nil,    20,
   nil,   nil,    19,    19,   nil,   nil,    20,    20,    21,   nil,
    21,    21,    22,   nil,    22,    22,   nil,    21,   nil,   nil,
   nil,    22,   nil,   nil,    21,    21,   nil,   nil,    22,    22,
    23,   nil,    23,    23,    24,   nil,    24,    24,   nil,    23,
   nil,   nil,   nil,    24,   nil,   nil,    23,    23,   nil,   nil,
    24,    24,    25,   nil,    25,    25,    26,   nil,    26,    26,
   nil,    25,   nil,   nil,   nil,    26,   nil,   nil,    25,    25,
   nil,   nil,    26,    26,    27,   nil,    27,    27,    28,   nil,
    28,    28,   nil,    27,   nil,   nil,   nil,    28,   nil,   nil,
    27,    27,   nil,   nil,    28,    28,    29,   nil,    29,    29,
    34,   nil,    34,    34,   nil,    29,    29,   nil,   nil,    34,
   nil,   nil,    29,    29,   nil,   nil,    34,    34,    35,   nil,
    35,    35,    37,   nil,    37,    37,   nil,    35,   nil,   nil,
   nil,    37,   nil,   nil,    35,    35,   nil,   nil,    37,    37,
    68,   nil,    68,    68,    71,   nil,    71,    71,   nil,    68,
   nil,   nil,   nil,    71,   nil,   nil,    68,    68,   nil,   nil,
    71,    71,    55,    55,    55,    55,    55,    55,    55,    55,
    55,    55,    55,    55,   nil,   nil,     5,   nil,    55,     5,
     5,     5,   nil,   nil,     8,     5,     5,     8,     5,     8,
   nil,   nil,   nil,     8,     8,    31,     8,   nil,    31,    31,
    31,   nil,   nil,    69,    31,    31,    69,    31,    69,   nil,
   nil,    70,    69,    69,    70,    69,    70,   nil,   nil,    78,
    70,    70,    78,    70,    78,   nil,   nil,   nil,    78,    78,
   nil,    78,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    39,    40,    40,    40,    40,
    40,    40,    40,    40,    40,    40,    40,    40,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
    73,    73,    43,    43,    43,    43,    43,    43,    43,    43,
    43,    43,    44,    44,    44,    44,    44,    44,    44,    44,
    44,    44,    48,    48,    48,    48,    48,    48,    48,    48,
    49,    49,    49,    49,    49,    49,    49,    49,    50,    50,
    50,    50,    50,    50,    50,    50,    51,    51,    51,    51,
    51,    51,    51,    51,    52,    52,    52,    52,    52,    52,
    52,    52 ]

racc_action_pointer = [
    89,    14,   nil,   430,    -4,   360,    -7,    -6,   368,    -5,
   nil,   nil,   107,   111,   129,    19,   133,   151,   155,   173,
   177,   195,   199,   217,   221,   239,   243,   261,   265,   283,
    25,   379,   nil,   nil,   287,   305,    37,   309,    64,   442,
   454,    -2,   nil,   490,   500,    32,    54,    76,   510,   518,
   526,   534,   542,    98,   nil,   360,   466,   nil,   -11,   nil,
   nil,    20,    42,    79,    64,   nil,   nil,   nil,   327,   387,
   395,   331,    85,   478,    82,   nil,    86,   nil,   403,   nil,
   nil ]

racc_action_default = [
   -35,   -35,    -1,    -2,   -13,   -35,   -35,   -35,   -35,   -35,
   -14,   -15,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,
   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,   -35,
   -35,   -35,    -5,   -11,   -35,   -35,   -35,   -35,   -13,   -16,
   -17,   -35,    81,   -18,   -19,   -20,   -21,   -22,   -23,   -24,
   -25,   -26,   -27,   -28,   -29,   -35,   -33,   -31,   -35,    -4,
   -12,   -35,   -35,   -35,   -35,   -30,    -3,   -32,   -35,   -35,
   -35,   -35,   -35,   -34,    -7,    -8,   -35,   -10,   -35,    -9,
    -6 ]

racc_goto_table = [
     2,     1,    31,    58,   nil,    33,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    39,    40,
    41,    60,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,   nil,   nil,   nil,   nil,
    61,    62,   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    74,
    75,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    80,   nil,
   nil,   nil,   nil,   nil,    73,   nil,   nil,    76 ]

racc_goto_check = [
     2,     1,     4,     5,   nil,     2,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,     3,
     3,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,   nil,   nil,   nil,   nil,
     3,     3,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,     3,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     1,     0,    16,    -3,   -26 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 33, :_reduce_1,
  1, 33, :_reduce_2,
  4, 34, :_reduce_3,
  3, 34, :_reduce_4,
  2, 34, :_reduce_5,
  7, 34, :_reduce_6,
  5, 34, :_reduce_7,
  5, 34, :_reduce_8,
  6, 34, :_reduce_9,
  5, 34, :_reduce_10,
  1, 36, :_reduce_11,
  2, 36, :_reduce_12,
  1, 35, :_reduce_13,
  1, 35, :_reduce_14,
  1, 35, :_reduce_15,
  2, 35, :_reduce_16,
  2, 35, :_reduce_17,
  3, 35, :_reduce_18,
  3, 35, :_reduce_19,
  3, 35, :_reduce_20,
  3, 35, :_reduce_21,
  3, 35, :_reduce_22,
  3, 35, :_reduce_23,
  3, 35, :_reduce_24,
  3, 35, :_reduce_25,
  3, 35, :_reduce_26,
  3, 35, :_reduce_27,
  3, 35, :_reduce_28,
  3, 35, :_reduce_29,
  3, 35, :_reduce_30,
  3, 35, :_reduce_31,
  4, 35, :_reduce_32,
  1, 37, :_reduce_33,
  3, 37, :_reduce_34 ]

racc_reduce_n = 35

racc_shift_n = 81

racc_token_table = {
  false => 0,
  :error => 1,
  "||" => 2,
  "&&" => 3,
  "==" => 4,
  "!=" => 5,
  "<" => 6,
  "<=" => 7,
  ">" => 8,
  ">=" => 9,
  "*" => 10,
  "/" => 11,
  "+" => 12,
  "-" => 13,
  :UMINUS => 14,
  "!" => 15,
  :ID => 16,
  "=" => 17,
  ";" => 18,
  "{" => 19,
  "}" => 20,
  "if" => 21,
  "(" => 22,
  ")" => 23,
  "else" => 24,
  "while" => 25,
  "do" => 26,
  "until" => 27,
  "print" => 28,
  :NUM => 29,
  :BOOL => 30,
  "," => 31 }

racc_nt_base = 32

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"||\"",
  "\"&&\"",
  "\"==\"",
  "\"!=\"",
  "\"<\"",
  "\"<=\"",
  "\">\"",
  "\">=\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "UMINUS",
  "\"!\"",
  "ID",
  "\"=\"",
  "\";\"",
  "\"{\"",
  "\"}\"",
  "\"if\"",
  "\"(\"",
  "\")\"",
  "\"else\"",
  "\"while\"",
  "\"do\"",
  "\"until\"",
  "\"print\"",
  "NUM",
  "BOOL",
  "\",\"",
  "$start",
  "target",
  "stmt",
  "exp",
  "stmts",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 17)
  def _reduce_1(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_2(val, _values)
     val[0]
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_3(val, _values)
     Assignment.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_4(val, _values)
     Block.new(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_5(val, _values)
     Block.new()
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_6(val, _values)
     IfThenElse.new(val[2], val[4], val[6])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_7(val, _values)
     IfOnly.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_8(val, _values)
     WhileDo.new(val[2], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_9(val, _values)
     DoUntil.new(val[1], val[4])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_10(val, _values)
     PrintStmt.new(val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_11(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_12(val, _values)
     val[0] << val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_13(val, _values)
     VariableExp.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_14(val, _values)
     Numeral.new(val[0])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_15(val, _values)
     val[0] ? TruthValue.trueValue : TruthValue.falseValue
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_16(val, _values)
     Minus.new(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_17(val, _values)
     Negation.new(val[1])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_18(val, _values)
     Addition.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_19(val, _values)
     Subtraction.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_20(val, _values)
     Multiplication.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_21(val, _values)
     Division.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_22(val, _values)
     ComparisonEqual.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_23(val, _values)
     ComparisonDifferent.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_24(val, _values)
     ComparisonLessThan.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_25(val, _values)
     ComparisonLessThanOrEqual.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_26(val, _values)
     ComparisonGreaterThan.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_27(val, _values)
     ComparisonGreaterThanOrEqual.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_28(val, _values)
     LogicalAnd.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_29(val, _values)
     LogicalOr.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_30(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_31(val, _values)
     FunctionCall.new(val[0], [])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_32(val, _values)
     FunctionCall.new(val[0], val[2])
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_33(val, _values)
     [val[0]]
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_34(val, _values)
     val[0].push(val[2])
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser


